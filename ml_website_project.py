# -*- coding: utf-8 -*-
"""study_machine_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xzh77zmQIKwCxbSF3TuSFDjH8zLuUmpk
"""

# Importing libraries and declaring variables
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

uri= 'https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv'

SEED = 5
np.random.seed(SEED)
df = pd.read_csv(uri)

change = {
    0: 1,
    1: 0
}

df["finished"] = df["unfinished"].map(change)

df_x = df[['expected_hours', 'price']]
df_y = df['finished']

raw_train_x, raw_test_x, train_y, test_y = train_test_split(df_x, df_y, test_size = 0.25, stratify = df_y)
print(f"Training with {len(train_x)} and testing with {len(test_x)}")

# Baseline
baseline_predict = np.ones(540)
baseline_accuracy = accuracy_score(test_y, baseline_predict)
print(f"Baseline accuracy was {baseline_accuracy:.2%}")

# Model training
scaler = StandardScaler()
scaler.fit(raw_train_x)
train_x = scaler.transform(raw_train_x)
test_x = scaler.transform(raw_test_x)

modelo = SVC(gamma='auto')
modelo.fit(train_x, train_y)
predict = modelo.predict(test_x)

accuracy = accuracy_score(test_y, predict)
print(f"Accuracy was {accuracy:.2%}")

data_x = test_x[:,0]
data_y = test_x[:,1]

x_min = data_x.min()
x_max = data_x.max()
y_min = data_y.min()
y_max = data_y.max()

pixels = 100
eixo_x = np.arange(x_min, x_max, (x_max - x_min) / pixels)
eixo_y = np.arange(y_min, y_max, (y_max - y_min) / pixels)

xx, yy = np.meshgrid(eixo_x, eixo_y)
points = np.c_[xx.ravel(), yy.ravel()]

Z = modelo.predict(points)
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.3)
plt.scatter(data_x, data_y, c=test_y, s=1)